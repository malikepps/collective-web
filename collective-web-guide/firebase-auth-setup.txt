## 3. FIREBASE CONFIGURATION

### 3.1 Create Firebase Config File
```typescript
// src/lib/firebase/config.ts
import { initializeApp, getApps, getApp } from 'firebase/app';
import { getAuth } from 'firebase/auth';
import { getFirestore } from 'firebase/firestore';
import { getStorage } from 'firebase/storage';

const firebaseConfig = {
  apiKey: process.env.NEXT_PUBLIC_FIREBASE_API_KEY,
  authDomain: process.env.NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN,
  projectId: process.env.NEXT_PUBLIC_FIREBASE_PROJECT_ID,
  storageBucket: process.env.NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET,
  messagingSenderId: process.env.NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID,
  appId: process.env.NEXT_PUBLIC_FIREBASE_APP_ID,
  measurementId: process.env.NEXT_PUBLIC_FIREBASE_MEASUREMENT_ID
};

// Initialize Firebase
const app = getApps().length > 0 ? getApp() : initializeApp(firebaseConfig);
const auth = getAuth(app);
const db = getFirestore(app);
const storage = getStorage(app);

export { app, auth, db, storage };
```

### 3.2 Set Up Environment Variables
Create `.env.local` file:
```
NEXT_PUBLIC_FIREBASE_API_KEY=your_api_key
NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN=your_auth_domain
NEXT_PUBLIC_FIREBASE_PROJECT_ID=your_project_id
NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET=your_storage_bucket
NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID=your_sender_id
NEXT_PUBLIC_FIREBASE_APP_ID=your_app_id
NEXT_PUBLIC_FIREBASE_MEASUREMENT_ID=your_measurement_id
NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY=your_stripe_key
```

### 3.3 Create Firebase Hooks
```typescript
// src/lib/hooks/useFirestore.ts
import { db } from '../firebase/config';
import { 
  collection, doc, getDoc, getDocs, query, where, 
  orderBy, limit, startAfter, DocumentData 
} from 'firebase/firestore';

// Generic document fetcher
export const fetchDocument = async (collectionName: string, docId: string) => {
  const docRef = doc(db, collectionName, docId);
  const docSnap = await getDoc(docRef);
  
  if (docSnap.exists()) {
    return { id: docSnap.id, ...docSnap.data() };
  }
  
  return null;
};

// Fetch collection with pagination
export const fetchCollection = async (
  collectionName: string,
  conditions: Array<{field: string, operator: string, value: any}> = [],
  sortField = 'createdDate',
  sortDirection = 'desc',
  pageSize = 10,
  lastDoc: DocumentData | null = null
) => {
  let q = collection(db, collectionName);
  
  // Apply filters
  if (conditions.length > 0) {
    q = query(
      q,
      ...conditions.map(c => where(c.field, c.operator as any, c.value))
    );
  }
  
  // Apply sorting
  q = query(q, orderBy(sortField, sortDirection as any));
  
  // Apply pagination
  q = query(q, limit(pageSize));
  
  // If we have a last document, start after it
  if (lastDoc) {
    q = query(q, startAfter(lastDoc));
  }
  
  const querySnapshot = await getDocs(q);
  const data: Array<DocumentData> = [];
  
  querySnapshot.forEach((doc) => {
    data.push({ id: doc.id, ...doc.data() });
  });
  
  const lastVisible = querySnapshot.docs[querySnapshot.docs.length - 1];
  
  return {
    data,
    lastDoc: lastVisible,
    hasMore: querySnapshot.docs.length === pageSize
  };
};
```

## 4. AUTHENTICATION IMPLEMENTATION

### 4.1 Create Auth Context
```typescript
// src/lib/context/AuthContext.tsx
import { createContext, useContext, useEffect, useState, ReactNode } from 'react';
import { 
  PhoneAuthProvider, signInWithCredential, 
  signOut, User, RecaptchaVerifier 
} from 'firebase/auth';
import { auth } from '../firebase/config';

interface AuthContextType {
  user: User | null;
  loading: boolean;
  verifyPhoneNumber: (phoneNumber: string) => Promise<string>;
  confirmCode: (verificationId: string, code: string) => Promise<void>;
  logout: () => Promise<void>;
}

const AuthContext = createContext<AuthContextType | undefined>(undefined);

export const AuthProvider = ({ children }: { children: ReactNode }) => {
  const [user, setUser] = useState<User | null>(null);
  const [loading, setLoading] = useState(true);
  let recaptchaVerifier: RecaptchaVerifier | null = null;

  useEffect(() => {
    // Listen for auth state changes
    const unsubscribe = auth.onAuthStateChanged((user) => {
      setUser(user);
      setLoading(false);
    });

    // Cleanup subscription
    return () => unsubscribe();
  }, []);

  const verifyPhoneNumber = async (phoneNumber: string) => {
    if (typeof window !== 'undefined') {
      // Create RecaptchaVerifier if it doesn't exist
      if (!recaptchaVerifier) {
        recaptchaVerifier = new RecaptchaVerifier(auth, 'recaptcha-container', {
          size: 'invisible',
        });
      }
      
      // Send verification code
      const provider = new PhoneAuthProvider(auth);
      return provider.verifyPhoneNumber(phoneNumber, recaptchaVerifier);
    }
    throw new Error('Cannot verify phone number on server side');
  };

  const confirmCode = async (verificationId: string, code: string) => {
    const credential = PhoneAuthProvider.credential(verificationId, code);
    await signInWithCredential(auth, credential);
  };

  const logout = async () => {
    await signOut(auth);
  };

  const value = {
    user,
    loading,
    verifyPhoneNumber,
    confirmCode,
    logout,
  };

  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;
};

export const useAuth = () => {
  const context = useContext(AuthContext);
  if (context === undefined) {
    throw new Error('useAuth must be used within an AuthProvider');
  }
  return context;
};
```

### 4.2 Implement Login Component
```tsx
// src/components/auth/PhoneLogin.tsx
import { useState } from 'react';
import { useAuth } from '../../lib/context/AuthContext';

export default function PhoneLogin() {
  const [phoneNumber, setPhoneNumber] = useState('');
  const [verificationCode, setVerificationCode] = useState('');
  const [verificationId, setVerificationId] = useState('');
  const [step, setStep] = useState(1);
  const [error, setError] = useState('');
  const [loading, setLoading] = useState(false);
  
  const { verifyPhoneNumber, confirmCode } = useAuth();
  
  const handleSendCode = async (e: React.FormEvent) => {
    e.preventDefault();
    setLoading(true);
    setError('');
    
    try {
      const formattedNumber = phoneNumber.startsWith('+') 
        ? phoneNumber 
        : `+1${phoneNumber}`;
      
      const id = await verifyPhoneNumber(formattedNumber);
      setVerificationId(id);
      setStep(2);
    } catch (err) {
      setError('Failed to send verification code. Please try again.');
      console.error(err);
    } finally {
      setLoading(false);
    }
  };
  
  const handleVerifyCode = async (e: React.FormEvent) => {
    e.preventDefault();
    setLoading(true);
    setError('');
    
    try {
      await confirmCode(verificationId, verificationCode);
      // Successful login will trigger the auth state change
    } catch (err) {
      setError('Invalid verification code. Please try again.');
      console.error(err);
    } finally {
      setLoading(false);
    }
  };
  
  return (
    <div className="p-6 bg-background text-white">
      <h1 className="text-2xl font-marfa font-semibold mb-6">
        Welcome to Collective
      </h1>
      
      {/* Invisible recaptcha container */}
      <div id="recaptcha-container"></div>
      
      {step === 1 ? (
        <form onSubmit={handleSendCode}>
          <div className="mb-4">
            <label className="block font-marfa text-sm mb-2">
              Phone Number
            </label>
            <input
              type="tel"
              value={phoneNumber}
              onChange={(e) => setPhoneNumber(e.target.value)}
              className="w-full p-3 bg-gray-800 rounded"
              placeholder="+1 (555) 555-5555"
              required
            />
          </div>
          {error && <p className="text-red-500 mb-4">{error}</p>}
          <button
            type="submit"
            disabled={loading}
            className="w-full bg-primary text-white p-3 rounded font-marfa font-medium"
          >
            {loading ? 'Sending...' : 'Send Verification Code'}
          </button>
        </form>
      ) : (
        <form onSubmit={handleVerifyCode}>
          <div className="mb-4">
            <label className="block font-marfa text-sm mb-2">
              Verification Code
            </label>
            <input
              type="text"
              value={verificationCode}
              onChange={(e) => setVerificationCode(e.target.value)}
              className="w-full p-3 bg-gray-800 rounded"
              placeholder="123456"
              required
            />
          </div>
          {error && <p className="text-red-500 mb-4">{error}</p>}
          <button
            type="submit"
            disabled={loading}
            className="w-full bg-primary text-white p-3 rounded font-marfa font-medium"
          >
            {loading ? 'Verifying...' : 'Verify Code'}
          </button>
          <button
            type="button"
            onClick={() => setStep(1)}
            className="w-full mt-2 bg-transparent text-white p-3 border border-gray-600 rounded font-marfa"
          >
            Back
          </button>
        </form>
      )}
    </div>
  );
}
```

### 4.3 Create Protected Route Wrapper
```tsx
// src/components/auth/ProtectedRoute.tsx
import { useRouter } from 'next/router';
import { useAuth } from '../../lib/context/AuthContext';
import { useEffect } from 'react';

export default function ProtectedRoute({ children }: { children: React.ReactNode }) {
  const { user, loading } = useAuth();
  const router = useRouter();
  
  useEffect(() => {
    if (!loading && !user) {
      router.push('/auth/login');
    }
  }, [loading, user, router]);
  
  if (loading) {
    return <div className="flex items-center justify-center h-screen bg-background">
      <div className="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-primary"></div>
    </div>;
  }
  
  return user ? <>{children}</> : null;
} 